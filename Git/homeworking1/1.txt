Введение в Git

Что такое Git? Это система контроля версий. Попробуем понять это определение:

- как установить и настроить Git?
- что такое контроль версий?
- как он реализован в Git?
- что такое репозиторий?
- три состояния файлов, фиксация изменений
- лог изменений, хэши коммитов, понятие состояния репозитория
- использование git diff

Простые наглядные примеры позволят вам понять, как устроен Git, и вы поймете - как легко и просто им пользоваться!

Домашняя работа

       1. Создайте репозиторий в пустой папке
       2. Добавьте в папку файл. Изучите вывод команды git status. Проиндексируйте файл командой git add. Снова посмотрите вывод git status.
       3. Зафиксируйте изменения командой git commit.
       4. Сделайте и зафиксируйте следующие изменения (каждый подпункт - одна фиксация):
          -  Добавление сразу трех файлов
          -  Изменения в тексте двух файлов
          -  Изменения в тексте одного файла, удаление другого и добавление еще одного
       5.* Удалите из какой-либо подпапки все файлы и зафиксируйте это изменение (подпапку, конечно же, надо предварительно создать). А затем удалите и саму пустую подпапку. Объясните результат.
       6. Изучите вывод команды git log. Прочтите о ее различных ключах: https://git-scm.com/book/ru/v1/%D0%9E%D1%81%D0%BD%D0%BE%D0%B2%D1%8B-Git-%D0%9F%D1%80%D0%BE%D1%81%D0%BC%D0%BE%D1%82%D1%80-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8-%D0%BA%D0%BE%D0%BC%D0%BC%D0%B8%D1%82%D0%BE%D0%B2
       7. * Создайте свой формат вывода git log с помощью ключа --pretty=format
       8. * Внесите изменения в репозиторий, но не фиксируйте их. Посмотрите git status. Теперь дайте команду git stash и снова посмотрите статус и свои файлы. А теперь git stash apply. Попробуйте объяснить результат, не прибегая к документации.

    Решением ДЗ служит ОДИН текстовый файл, в который вы запишете все использованные вами команды и их вывод в консоль.

    Задания, помеченные знаком "*" являются необязательными.



	1. $ git init
	2. 	$ git status		// есть файлы Untracked неотслеживаемые
		$ git add *.txt		// добавлены в индекс отслеживания. файлы txt
		$ git status 		// сейчас в статусе new file. Требуется коммит.
	3. $ git commit -m"add2 txt files"	Зафиксированы изменения
	4.1 	$ git add *.txt
		$ git commit -m"add 3 txt files"

	4.2	$ git status 		// Имеются 2 файла со статусом красным modified (файлы изменившиеся по сравнению с имеющимся индексом)
		$ git add *.txt
		$ git commit -m"changes 2 files"

	4.3 	$ git status		// Имеется файл deleted, файл modified, файл untracked
		$ git add *.txt
		$ git commit -m"delete 1 file, chage 1 file, new 1 file"
		$ git status		// Файл со статусом delete НЕ попал в коммит
		$ git add 123.txt
		$ git status		// Теперь файл готов к коммиту
		$ git commit -m"delete 1 file again"

	5. 		Создан каталог с файлами
		$ git status		// Файл 999 в статусе untracked. Это созданная папка с файлами. Статус почемуто только про нее.
		$ git add 999
		$ git status 		// Есть 4 new file: 	999/22.txt
					//			999/33.txt
					//			999/44.txt
					//			999/55.txt
		$ git commit -m"new folder with 4 files"
		$ git status		// Все файлы под контролем и соответсуют индексу
			Удалены все 4 файла
		$ git status		// Имеются 4 файла со статусом deleted.
		$ git add 999
		$ git commit -m"delete 4 files"
		$ git status		// Все файлы под контролем и соответствуют индексу
			Удалена пустая папка
		$ git status		// Все файлы под контролем и соответствуют индексу. GIT не отслеживает пустые папки.\

	6. 	$ git log 		//Выводит историю коммитов. Кем, когда, комментарий, хэш коммита.
		$ git log -p		// Показывает разницу между коммитами. (жуткая мешанина)
		$ git log -p -2 	// Ограничивает вывод 2-мя последними записями
		$ git log --stat	// выводит под каждым коммитом список измененнных файлов

		$ git log --pretty=oneline	// данные о коммитах в одну строку
		$ git log --pretty= (short, full, fuller)	// Любой на выбор параметр

		$ gitk 			// Визуальный просмотр логов в программе gitk

	7.	$ git log --pretty=format:"%h - %an, %ar : %s"
			//часть вывода ниже
			04d03e6 - Pavel02, 33 minutes ago : delete 4 files
			2d56e87 - Pavel02, 37 minutes ago : new folder with 4 files

		$ git log --pretty=format:"..."  // Добавляем параметры
						// %H - Хеш коммита
						// %h - Сокращенный хеш коммита
						// %an - Имя автора
						// %cn - Имя коммитера
						// %ar - Дата автора относительная
						// %s - комментарий  ..................... и другие параметры

	8. 	$ git stash 		// Временно прячет в буфер изменения  репозитории. Делает репо чистым как в индексе
		$ git stash apply 	// Возвращает в контроль версий ранее имеющиеся изменения

					//Это бывает полезным когда Вы работаете. Потом нужно сделать срочную задачу.
					// Временно прячете текущие изменения. Делаете срочняк, а потом возвращаете старые изменения














