<?php
/**
 * Created by PhpStorm.
 * User: User
 * Date: 013 13.01.17
 * Time: 14:25
 */

/**
 * git - распределенная система контроля версий. Ее задача - вести полную историю изменений в репозитории.
 * Нет центрального репозитория. Любая папка под управлением Git - является репозиторием.
 * Репозитории между собой могут обмениваться ИЗМЕНЕНИЯМИ.
 * Ветка - эта альтернативная история изменений.
 *
 * Linux (apt-get install git)
 * Windows (git-for-windows.github.io) Здесь git и все необходимое окружение (bash и т.д.)
 * Git Bash - командный процессор. консоль командной строки. Аккуратно и качественно перенесли под Windows.
 *      ls      (список файлов и папок)
 *      ls -a    (список all фалов, в том числе скрытых)
 *      cd /c/Server/tmp     (переход в нужную директорию)
 *      pwd      (отображает путь до текущей папки)
 *
 * В репозитории имеется скрытая папка .git , в которой содержится вся нужная служебная информация - история всех
 * изменений нашего репозитория.
 * А сам git - это просто набор скриптов, иначе - команд в консоли!
 *
 * Две настройки - Ваше имя и почта:
 *      $ git config --global user.name "Иван Иванов"      //(global - для всех репозиториев будут эти настройки)
 *      $ git config --global user.email ivanov@example.com
 *
 * Создаем репозиторий в пустой папке
 *      $ cd work   /Переходим в нужную папку-репозиторий
 *      $ git init  /Инициализация git
 *
 *      $ git status    //Информация о файлах в репозитории git
 *      $ git add README.txt    //Отдаем файл под контроль git
 *
 *      $ git commit -m "Добавлен файл README"      //Точка фиксации изменений
 *
 *      В git файлы могут находиться в одном из 4 состояний
 *          untracked   - неотслеживаемый файл
 *          unmodified  - файл неизменившийся с момента последней фиксации
 *          modified    - изменившийся по сравнению с имеющимся индексом
 *          staged      - файл подготовленный для фиксации изменений
 *
 *      $ git add       //Перевод файла в состояние staged
 *
 *      $ git commit -a -m "Комментарий"    //Одновременно add и commit в одной команде //Лучше не делать
 *
 *      $ git rm FILE -         //Удаляет файл из папки и из индекса
 *      $ git rm --cashed FILE -   //Удаляет файл только из индекса GIT
 *
 *      $ git log       //Просмотр имеющихся коммитов  (в том числе увидим хэш коммита)
 *      $ git log -p    //Подробная информация о коммитах
 *
 * Общее правило:
 *      Относитесь к истории git, как к бухгалтерским проводкам.
 *      Отменять нельзя! Только сделать корректирующую проводку.
 *
 *      $ git reset HEAD   //Откат к последнем изменения перед индексацией (отмена индексации)
 *      $ git checkout -- test.txt      //Откат файла test.txt к состоянию, сохраненному в последнем коммите
 *
 *      $ git reset --hard <commit>     //Откат к указанному коммиту с потерей ВСЕХ изменений
 *      $ git reset --hard HEAD
 *
 * 
 *
 *
 *
 *
 *
 *
 *
 */