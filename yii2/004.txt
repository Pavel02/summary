
13 Работа с БД. Выборка данных. Часть1
	Для работы с БД будем использовать в модели наследование от класса ActiveRecord. 
		В первои Yii были строгие правила: 
				- Таблицы и поля именуются в нижнем регистре.
				- Слова в названиях разделяются символом подчеркивания (например product_order).
				- В именах таблиц рекомендовано использовать единственное число (можно множественное главное единобразие в БД).
				- Имена таблиц с префиксом tbl_ .
		Также желательно, чтобы в таблице был первичный ключ (называйте просто id) 
		Для полей с названиями товара используйте  title  или  name. 
		
		Подключение настраивается в 	' /config/db.php '.  В допл файлах есть дамп учебной базы   'catalog.sql'  В phpmyadmin можное ее восстановить в БД с названием Catalog.
			Содержимое   ' /config/db.php '  
									return [
										'class' => 'yii\db\Connection',
										'dsn' => 'mysql:host=localhost;dbname=catalog',
										'username' => 'root',
										'password' => '',
										'charset' => 'utf8',
									];
		В БД  catalog   имеются таблицы  'categories' 'comments' 'forgot' 'options' 'pages' 'products' 'users' 

	Для работы с таблицей 'categories'  создадим  модель   ' C:\OpenServer\domains\yii.test\basic\models\Category.php '
									<?php

									namespace app\models;

									use yii\db\ActiveRecord;

									class Category extends ActiveRecord
									{
										public static function tableName(){
											return 'categories';					// Возвращает имя таблицы с которой мы хотим работать.
										}
									}
		
		В контроллере пишем в экшн.
									    public function actionShow(){
											$this->view->title = 'Одна статья!';
											$this->view->registerMetaTag(['name' => 'keywords', 'content' => 'ключевики...']);
											$this->view->registerMetaTag(['name' => 'description', 'content' => 'описание страницы...']);

											$cats = Category::find()->all(); 				// Так из модели мы выбираем все занчения // равносильно SELECT * FROM category;

											return $this->render('show', compact('cats'));	// Передаем в вид результат выборки из БД.
											
										}
		
	
	Если мы называем модель по имени таблицы, то Yii автоматом свяжет модель с соответсвующей таблицей.
	( И этот вариант в оффициальной документации).
		У нас же таблица 'categories'   а модель  'Category'. чтобы они связались, то в моделе надо указать
								    public static function tableName(){
										return 'categories';
									}

	
14 Работа с БД. Выборка данных. Часть2
	Можем вывести часть таблицы, для этого в виде пишем:
									<?php
									foreach ($cats as $cat) {
										echo $cat->title . '<br>';
									}
									?>
	До этого в контроллере мы получали данные таблицы     	$cats = Category::find()->all();

   	А потом передавали в представление   			return $this->render('show', compact('cats')); 
	
	Чаще всего нам нужна не вся выборка из таблицы, а часть конкретных данных по условию.
	Для этого вся выборка фактически проходит в 3 этапа: 
		1. Создание нового объекта запроса. метод   ->find()
		2. Настроить этот объект запроса (за это отвечают методы построители запросов where, order by, limit). Причем этим методы могут быть посередине в любом порядке.
		3. Метод для получения данных в виде объектов  ->all()   ,  count,   sum.
	
	Например пишем в контроллере 
					$cats = Category::find()->orderBy(['id' => SORT_DESC])->all();       // По умолчанию прямая сортировка SORT_ASC
	
	В документации указано, что если вы вытаскиваете много данных, или Вам не важен формат, то лучше доставать 
	 их не объектом, а ввиде массива. 	 Массив будет потреблять меньше ресурсов.
					$cats = Category::find()->asArray()->all();       // Данные из таблицы вернутся массивом. И доступ к ним в представленни будет уже  $cats['title]
					
	C методом ->where(['<=', 'id', 695])->    // Первый элемент массива это Оператор, потом Поле, потом Значение поля
	
	Так в контроллере возможны любые вариации ниже: 
			//        $cats = Category::find()->all();
			//        $cats = Category::find()->orderBy(['id' => SORT_DESC])->all();       // По умолчанию прямая сортировка SORT_ASC
			//        $cats = Category::find()->asArray()->all();       // Данные из таблицы вернутся массивом. И доступ к ним в представленни будет уже  $cats['title]
			//        $cats = Category::find()->asArray()->where('parent=691')->all();        //  1 вариант передачи параметров в ->where() в виде строки.    Все строки где поле parent - 691
			//        $cats = Category::find()->asArray()->where(['parent' => '691'])->all();       //  2 вариант передачи параметров в ->where() в виде массива.
			//        $cats = Category::find()->asArray()->where(['like', 'title', 'pp'])->all();       //  аналогично    SELECT * FROM `categories` WHERE `title` LIKE '%pp%'
			//        $cats = Category::find()->asArray()->where(['<=', 'id', 695])->all();               // аналогично  SELECT * FROM `categories` WHERE `id` <= 695
			//        $cats = Category::find()->asArray()->where('parent=691')->limit(2)->all();          //  аналогично SELECT * FROM `categories` WHERE parent=691 LIMIT 2   // Получим первые 2 попавшиеся записи
			//        $cats = Category::find()->asArray()->where('parent=691')->one();                    //  Будет выбрана ОДНА запись       // код SELECT * FROM `categories` WHERE parent=691     Здесь в запросе нет  limit . Запрос избыточен. Значит контроллер получит Все записи но в массив положит только одну.
																										// Это не очень хорошо, рекомендуют делать через    ->limit()
			//        $cats = Category::find()->asArray()->where('parent=691')->count();                    //  Получение количества записей.     // аналогично  SELECT COUNT(*) FROM `categories` WHERE parent=691
			//        $cats = Category::find()->asArray()->count();                                       // Без условия  where узнаем  сколько всего записей в таблице       // аналогично   SELECT COUNT(*) FROM `categories`

			//        $cats = Category::findOne(['parent' => 691]);                       // Метод findOne  вернет только 1 значение
			//        $cats = Category::findAll(['parent' => 691]);                          // Метод findAll  вернет все значения соответствующие условию   //    аналогично  SELECT * FROM `categories` WHERE `parent`=691

					$query = "SELECT * FROM categories WHERE title LIKE '%pp%'";            // строка для запроса
					$cats = Category::findBySql($query)->all();                             // мы получис аналогично   SELECT * FROM categories WHERE title LIKE '%pp%'
																							// Так мы можем составить SQL запрос любой сложности и отправить его на сервер.
 	Зачастую то, что будет подставляться в  LIKE  в качестве значения приходит от пользователя, 
	 поэтому для избежания SQL инъекции нужно использовать параметизированный запрос, который при выполнении будет экранирован.
						
					$query = "SELECT * FROM categories WHERE title LIKE :search";
					$cats = Category::findBySql($query, ['"search' => '%app%'])->all();
					
		
15 Отложенная и жадная загрузка данных.
	Есть связанные таблицы  categories  и  products.  Каждому продукту соответсвует своя категория. 
	В таблице products  есть поле  parent , которое является внешним ключом, который ссылается на поле id   в таблице  categories . 
		
	Для связных таблиц у нас для каждой таблицы должен быть своя модель. Например 	Product.php	и 	Category.php  .
		два метода hasMany  hasOne		один ко многим        связи один к одному  .
			
		hasMany  возвращает массив объектов 	
		hasOne   вернется один массив ActiveRecord или null   если не найдено.
	
	Например в   'C:\OpenServer\domains\yii.test\basic\models\Category.php'  
									<?php

									namespace app\models;

									use yii\db\ActiveRecord;

									class Category extends ActiveRecord{

										public static function tableName(){
											return 'categories';
										}

										public function getPoducts() {      // Метод для связи двух таблиц. Название не важно, но желательно логичное
											return $this->hasMany(Product::className(), ['parent' => 'id']);                     // первый параметр имя класса с которым связываем.
																																// Второй параметр это массив (ключи из связываемой таблицы, а значение поле из текущей).
										}
									}
		
		
		
		
		
		
		
		
		
		
		