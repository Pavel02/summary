
Практика создания интернет-магазина.
01 Установка фреймворка.
	в консоли OpenServera
				composer global require "fxp/composer-asset-plugin:^1.2.0"
				composer create-project yiisoft/yii2-app-basic ./ 2.0.11		// Установка в корень каталога
				exit															// Закрытие консоли 
	
	Включение ЧПУ  (4 шага)  изначально сайт доступен   по адресу http://yii2.loc/web/index.php?r=site%2Findex  )
			.htaccess  в корне сайта
							Options +FollowSymLinks
							IndexIgnore */*
							RewriteEngine on

							RewriteCond %{REQUEST_URI} !^/(web)
							RewriteRule ^assets/(.*)$ /web/assets/$1 [L]
							RewriteRule ^css/(.*)$ web/css/$1 [L]
							RewriteRule ^js/(.*)$ web/js/$1 [L]
							RewriteRule ^images/(.*)$ web/images/$1 [L]
							RewriteRule (.*) /web/$1

							RewriteCond %{REQUEST_FILENAME} !-f
							RewriteCond %{REQUEST_FILENAME} !-d
							RewriteRule . /web/index.php
	
	
			.htaccess  в каталоге   'web'   
					RewriteBase /

					RewriteCond %{REQUEST_FILENAME} !-f
					RewriteCond %{REQUEST_FILENAME} !-d

					RewriteRule . index.php
					
	В файле    '/web.php/'   
		Добавляем 'baseUrl'
						'request' => [
							// !!! insert a secret key in the following (if it is empty) - this is required by cookie validation
							'cookieValidationKey' => '****************************',
							'baseUrl' => '',                                                // Задаем для ЧПУ
						],
		
		Раскомментируем  	'urlManager' 
	
	Теперь ЧПУ   сайт доступен   'http://yii2.loc/site/index'	


	На GitHub создан пустой репо, далее в локальном репо в ком строке
					git remote add origin https://github.com/Pavel02/yii2-e-shop.git
					git push -u origin master
					
					
					
02. Перевод верстки в шаблон.
	У нас есть готовая бесплатная верстка интернет магазина на бутстрапе.
	
	В папку 'web/css/'  переносим все  CSS  стили  
	В папку 'web/'   переносим  каталоги  'fonts'  'images'  'js' 
	
	
	Все содержимое файла  верстки index.html  переносим в файл шаблона  '/views/layouts/main'.  старый файл переименуем в _main  Оставим для примера.
	Все ссылки подключения на CSS  и JS  из файла   '/views/layouts/main'   переносим в   'assets/AppAsset.php'  
	Проверяем, чтобы скрипты не были подключены несколько раз.
	
	Сверяемся с исходным файлом _main.php   и переносим метки и зависимости в новый main.php
	
	В процессе не подключались скрипты шрифтов. Решение в корневой файл  '.htaccess'   дописать     'RewriteRule ^fonts/(.*)$ web/fonts/$1 [L]'
	
	Есть скрипты подключаемые по условию (Если браузер Explorer версии 9 и ниже).
		1 способ Для такого создаем отдельный файл ltAppAsset. 
		2 способ прописываем прямо в шаблоне   '/views/layouts/main'
						    <?php
						//        $this->registerJsFile('js/html5shiv.js',              // подключение скрипта по условию можно в отдельном файле   use app\assets\ltAppAsset; 
						//            ['position' => yii\web\View::POS_HEAD,            // А можно вот так прямо в файле шаблона 
						//                'condition' => 'lte IE9'
						//            ]);
							?>
		
	В шаблоне оставляем весь общий код, а в вид все индивидуальное.
		Например слайдер, он только для главной. 
		Из '/views/layouts/main.php'  вырезаем все уникальное.  На их месте прописываем      <?= $content; ?>
			Все уникальное переносим в '/views/site/index.php/' 
			
	
	
	
03. Модель категорий.
	Сейчас главная страница работает корректно. Но сейчас в шаблоне указаны относительные пути 		<img alt="" src="images/home/iframe1.png">
	 Если мы будем не на  index.php  а на другой странице, то эти картинки не подтянутся.
		1 способ.  Все пути к картинкам, файлам переделать вручную как абсолютные. (от корня)   src="/images/home/iframe1.png"
		2 способ. Использовать Хелпер HTML 
	
	Для неважных картинок сделаем первый способ массовой заменой  (Ctrl+R)    вот это <img src="     меняем на    <img src="/ 		(Конкретно в нашем примере будет 6 замен осуществленно)
	
	
	Напишем свой виджет, который будет выводить левый блок 'Категории' далее в каждый вид мы сможем добавить данный блок одной строчкой.
	
	Также создаем БД c именем  'yii2_loc'   из файла  дампа  yii2_loc.sql . В ней пока что будут две таблицы  	'category'    'product'
	
	Создаем модель классы  Catehory.php   Product.php  также как таблицу в БД (тогда Yii2 автоматически подтянет связь), расширяем ActiveRecord. 
		Например содержимое файла 	Product.php 
					<?php

					namespace app\models;
					use yii\db\ActiveRecord;

					class Product extends ActiveRecord
					{
						public static function tableName()
						{
							return 'category';
						}

						public function getCategory()       // Образуем связь с таблицей категории
						{
							return $this->hasOne(Category::className(), ['id' =>'category_id']);       // Один продукт может иметь только одну  категорию. Связь hasOne
																										// В таблице категории поле id связано с полем категории-айди  таблицы Продукты       
						}
					}
	
	Настраиваем подключение к БД. 	в файле 	'/config/db.php' 
	
	Напишем свой виджет, который будет выводить левый блок 'Категории' далее в каждый вид мы сможем добавить данный блок одной строчкой.
		Виджеты должны лежать в каталоге '/components/'    создадим в нем    файл   'MenuWidgets.php'
			В методе может быть 2 метода   init  и   run.  run  чаще всего как раз для вывода.
								<?php

								namespace app\components;
								use yii\base\Widget;

								class MenuWidget extends Widget
								{
									public $tpl;        // template От него будет зависеть будет это Категории для внутренней админки, или Посетителя сайта
														// Соответсвенно будет или select   или li 

									public function init() {
										parent::init();
										if ($this->tpl === null) {
											$this->tpl = 'menu';
										}
										$this->tpl .= '.php';
									}
									public function run()
									{
										return $this->tpl;
									}
								}
			 
		Теперь в любом виде  мы прописываем в нужном месте		
						<?= \app\components\MenuWidget::widget(['tpl' => 'menu']) ?>    			// Здесь полный путь по пространству 
		и у нас выведется MENU  (это пока что) 
	
				
				
				